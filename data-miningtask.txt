sql data mining task

2-Display a single relation with: OrderId, OrderDate, CustomerName, City, Address, PostalCode, ShipperName, ProductName, Quantity.
Orders:
- OrderId (Primarykey)
- OrderDate
- CustomerId (ForeignKey)
- ShipperId (ForeignKey)

Customers:
- CustomerId (primarykey)
- CustomerName
- City
- Address
- PostalCode

Shippers:
- ShipperId (PrimaryKey)
- ShipperName

Products:
- ProductId (PrimaryKey)
- ProductName

OrderDetails:
- OrderDetailId (PrimaryKey)
- OrderId (ForeignKey)
- ProductId (ForeignKey)
- Quantity

3-Display all products ever been ordered and display the shipper name.
SELECT o.OrderId, o.OrderDate, c.CustomerName, c.City, c.Address, c.PostalCode, s.ShipperName, p.ProductName, od.Quantity
FROM Orders o
JOIN Customers c ON o.CustomerId = c.CustomerId
JOIN Shippers s ON o.ShipperId = s.ShipperId
JOIN OrderDetails od ON o.OrderId = od.OrderId
JOIN Products p ON od.ProductId = p.ProductId;

4-Display the count of all products shipped by each of the 3 shippers.

SELECT s.ShipperName, COUNT(p.ProductId) AS ProductCount
FROM Orders o
JOIN Shippers s ON o.ShipperId = s.ShipperId
JOIN OrderDetails od ON o.OrderId = od.OrderId
JOIN Products p ON od.ProductId = p.ProductId
GROUP BY s.ShipperName;

5-How many customers DO NOT have the words ‘son’ in their CustomerName.
SELECT *
FROM Customers
WHERE LOWER(CustomerName) NOT LIKE '%son%';

6-Find the total sales made in the year 1997.
SELECT SUM(od.Quantity) AS TotalSales
FROM Orders o
JOIN OrderDetails od ON o.OrderId = od.OrderId
WHERE YEAR(o.OrderDate) = 1997;

7. Display each customer_name and total_amount ever spent in the business, from highest amount.
SELECT c.CustomerName, SUM(od.Quantity * p.ProductPrice) AS TotalAmount
FROM Customers c
LEFT JOIN Orders o ON c.CustomerId = o.CustomerId
LEFT JOIN OrderDetails od ON o.OrderId = od.OrderId
LEFT JOIN Products p ON od.ProductId = p.ProductId
GROUP BY c.CustomerName
ORDER BY TotalAmount DESC;

8. Find the top supplier of the business (in terms of products ordered).
SELECT p.SupplierName, COUNT(od.ProductId) AS ProductCount
FROM OrderDetails od
JOIN Products p ON od.ProductId = p.ProductId
GROUP BY p.SupplierName
ORDER BY ProductCount DESC
LIMIT 1;

9. Find the total sales of each product.
SELECT p.ProductName, SUM(od.Quantity * p.ProductPrice) AS TotalSales
FROM OrderDetails od
JOIN Products p ON od.ProductId = p.ProductId
GROUP BY p.ProductName;

10. Find the best performing month in the business in terms of sales. Hint: Use substr() on the date to slice
SELECT SUBSTR(o.OrderDate, 1, 7) AS SalesMonth, SUM(od.Quantity * p.ProductPrice) AS MonthlySales
FROM Orders o
JOIN OrderDetails od ON o.OrderId = od.OrderId
JOIN Products p ON od.ProductId = p.ProductId
GROUP BY SalesMonth
ORDER BY MonthlySales DESC
LIMIT 1;

11. Find the total sales per day.
SELECT o.OrderDate, SUM(od.Quantity * p.ProductPrice) AS DailySales
FROM Orders o
JOIN OrderDetails od ON o.OrderId = od.OrderId
JOIN Products p ON od.ProductId = p.ProductId
GROUP BY o.OrderDate;

12. Find the total Sales for each Customer, the ones who have never ordered leave as 0.
SELECT c.CustomerName, COALESCE(SUM(od.Quantity * p.ProductPrice), 0) AS TotalSales
FROM Customers c
LEFT JOIN Orders o ON c.CustomerId = o.CustomerId
LEFT JOIN OrderDetails od ON o.OrderId = od.OrderId
LEFT JOIN Products p ON od.ProductId = p.ProductId
GROUP BY c.CustomerName;

13. In the same database, create the table payments and determine the foreign key, any relevant columns and their respective data types. Insert at least 5 records.
CREATE TABLE Payments (
    PaymentId INT PRIMARY KEY,
    CustomerId INT,
    PaymentAmount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId)
);

-- Insert at least 5 records
INSERT INTO Payments (PaymentId, CustomerId, PaymentAmount, PaymentDate)
VALUES
(1, 1, 100.00, '2023-01-01'),
(2, 2, 150.50, '2023-02-05'),
(3, 3, 75.25, '2023-03-10'),
(4, 4, 200.00, '2023-04-15'),
(5, 5, 120.75, '2023-05-20');
